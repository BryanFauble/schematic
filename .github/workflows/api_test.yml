# Built from:
# https://docs.github.com/en/actions/guides/building-and-testing-python
# https://github.com/Sage-Bionetworks/challengeutils/blob/master/.github/workflows/pythonapp.yml
# https://github.com/snok/install-poetry#workflows-and-tips

name: Test schematic API

on:
  workflow_dispatch:  # Allow manually triggering the workflow
  inputs:
    perform_benchmarking:
      type: boolean
      description: perform benchmarking test (True) or skip (False)
concurrency:
  # do not cancel the current running workflow from the same branch, PR when a new workflow is triggered
  # when the trigger is not a PR but a push, it will use the commit sha to generate the concurrency group
  # {{ github.workflow }}: the workflow name is used to generate the concurrency group. This allows you to have more than one workflows
  # {{ github.ref_type }}: the type of Git ref object created in the repository. Can be either branch or tag
  # {{ github.event.pull_request.number}}: get PR number
  # {{ github.sha }}: full commit sha
  # credit: https://github.com/Sage-Bionetworks-Workflows/sagetasks/blob/main/.github/workflows/ci.yml
  group: >-
    ${{ github.workflow }}-${{ github.ref_type }}-
    ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: false
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      POETRY_VERSION:  1.2.0rc1
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10"]

    steps:

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      #----------------------------------------------
      #          install & configure poetry
      #----------------------------------------------
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org \
            | python3 - --version ${{ env.POETRY_VERSION }};
          poetry config virtualenvs.create true;
          poetry config virtualenvs.in-project true;
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --all-extras

      #----------------------------------------------
      #    install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction

      #----------------------------------------------
      #              run API test suite
      #----------------------------------------------
      - name: Run all API tests
        env:
          SYNAPSE_ACCESS_TOKEN: ${{ secrets.SYNAPSE_ACCESS_TOKEN }}
          SERVICE_ACCOUNT_CREDS: ${{ secrets.SERVICE_ACCOUNT_CREDS }}
        if: ${{ inputs.perform_benchmarking }}
        run: >
          source .venv/bin/activate;
          pytest --cov-report=term --cov-report=html:htmlcov --cov=schematic/
          -m "schematic_api"

      - name: Run API tests + Exclude Benchmarks
        env:
          SYNAPSE_ACCESS_TOKEN: ${{ secrets.SYNAPSE_ACCESS_TOKEN }}
          SERVICE_ACCOUNT_CREDS: ${{ secrets.SERVICE_ACCOUNT_CREDS }}
        if: ${{ false == inputs.perform_benchmarking }}
        run: >
          source .venv/bin/activate;
          pytest --cov-report=term --cov-report=html:htmlcov --cov=schematic/
          -m "schematic_api and not rule_benchmark"

      - name: Upload pytest test results
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: htmlcov
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
